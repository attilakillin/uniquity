package attilakillin.uniquitybackend.services;

import attilakillin.uniquitybackend.entities.Request;
import attilakillin.uniquitybackend.repositories.RequestRepository;
import org.springframework.stereotype.Service;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.sql.Timestamp;
import java.util.Collection;

/**
 * Service class that handles request logging and retrieval.
 * <br>
 * This class creates an abstract layer over the specific persistence method used,
 * and provides convenient high-level functions for use in other services and
 * controllers.
 */
@Service
public class LoggingService {
    /**
     * Autowired repository instance.
     */
    private final RequestRepository repository;

    /**
     * The host user that runs this server instance.
     * As the user is not likely to change during runtime,
     * it is only initialized once, when this service is created.
     */
    private final String host;

    /**
     * Service constructor with the required dependency as a parameter.
     * @param repository An instance of the RequestRepository interface.
     */
    public LoggingService(RequestRepository repository) {
        this.repository = repository;

        // Determine name of host user, if possible.
        String host;
        try {
            host = getHostUser();
        } catch (IOException | InterruptedException ex) {
            // If we couldn't determine it, let's just use a static string instead.
            host = "UNKNOWN";
        }
        this.host = host;
    }

    /**
     * Log and persist a request with the given extension query.
     * All other request fields are auto-generated by this method, and do
     * not need to be provided.
     * @param extension The file extension the request contained.
     */
    public void logClientRequest(String extension) {
        // Determine current time.
        Timestamp now = new Timestamp(System.currentTimeMillis());

        // Save request.
        repository.save(new Request(this.host, now, extension));
    }

    /**
     * Retrieve all previous logged requests.
     * @return A collection of all requests.
     */
    public Collection<Request> getHistoricalRequests() {
        return repository.findAll();
    }

    /**
     * Retrieve the host user of the OS running this server instance.
     * @return The name of the user.
     * @throws IOException If the 'whoami' command could not be executed.
     * @throws InterruptedException If the 'whoami' command was interrupted during execution.
     */
    private String getHostUser() throws IOException, InterruptedException {
        // Build and start process.
        Process process = new ProcessBuilder()
            .command("whoami")
            .start();

        // Wait until completion.
        process.waitFor();

        // Read output stream of process.
        try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
            // The first line contains what we need.
            return reader.readLine();
        }
    }
}
